env GERRIT_HOST;
env SSH_PORT;
env HTTP_PORT;
env MY_NAME;

user root;
daemon off;
error_log stderr warn;

worker_processes 8;

events { worker_connections 1024; }

stream {
	upstream gerritssh {
		include '/etc/nginx/upstreams-ssh.conf';
	}
	server {
		listen 22;
		listen [::]:22;
		proxy_pass gerritssh;
	}
	server {
		listen 29418;
		listen [::]:29418;
		proxy_pass gerritssh;
	}
}

http {
	include mime.types;
	default_type application/octet-stream;

	sendfile on;
	gzip on;
	resolver 8.8.8.8 8.8.4.4;

	lua_package_path '/etc/nginx/lua/?.lua';
	init_by_lua_block {
		ffi = require('ffi')
		ffi.cdef('int getpid(void);')
		master_pid = tonumber(ffi.C.getpid())
	}
	init_worker_by_lua_file '/etc/nginx/lua/init-main.lua';
	lua_shared_dict state 1m;

	ssl_session_cache shared:SSL:10m;
	ssl_session_timeout 10m;

	proxy_set_header X-Forwarded-For $remote_addr;
	proxy_set_header Host $host;

	proxy_buffering off;
	proxy_request_buffering off;
	proxy_http_version 1.1;

	upstream gerrit {
		keepalive 16;
		include '/etc/nginx/upstreams.conf';
	}

	server {
		listen 443 ssl;
		listen [::]:443 ssl;

		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
		ssl_prefer_server_ciphers on;

		set_by_lua_block $myname { return os.getenv('MY_NAME') }
		server_name $myname;

		ssl_certificate /nginx-certs/nginx-cert.pem;
		ssl_certificate_key /nginx-certs/nginx-key.pem;

		location / {
			proxy_pass http://gerrit;
		}
	}

	server {
		listen 80;
		listen [::]:80;

		set_by_lua_block $myname { return os.getenv('MY_NAME') }
		server_name $myname;

		location / {
			rewrite ^ https://$myname$request_uri? permanent;
		}

		location /.well-known/acme-challenge {
			alias /var/lib/nginx/acme;
			try_files $uri =404;
		}
	}
}
